import Head from 'next/head';
import { useRouter } from 'next/router';
import BodyArticle from '@/components/body_article/body_article';
import style from '@/components/body_article/body_article.module.css';
import CardCom from '@/components/cards/card';
import { useEffect, useState } from 'react';
import axios from 'axios';

export default function CardPage() {
  const [cardData, setCardData] = useState(null);
  const router = useRouter();
  const { query } = router;
  const cardName = query.name ? query.name.replace(/-/g, ' ') : '';
  const { editingState, setEditiingState } = useState(false);
  const { _id, set_id } = useState(null);

  const { card_idField, setCardIDField } = useState('');
  const { card_nameField, setCardNameField } = useState('');
  const { card_expansionField, setCardExpansionField } = useState('');
  const { card_manaCostField, setCardManaCostField } = useState('');
  const { card_powerField, setCardPowerField } = useState('');
  const { card_toughnessField, setCardTougnessField } = useState('');
  const { card_cardTypeField, setCardTypeField } = useState('');
  const { card_abilityField, setCardAbilityField } = useState('');
  const { card_flavorTextField, setCardFlavorTextField } = useState('');
  const { card_quote, setCardQuoteField } = useState('');

  const handleCardIDChange = (event) => {
    setCardIDField(event.target.value);
  };

  const handleCardNameChange = (event) => {
    setCardNameField(event.target.value);
  };

  const handleCardExpansionChange = (event) => {
    setCardExpansionField(event.target.value);
  };

  const handleCardManaCostChange = (event) => {
    setCardManaCostField(event.target.value);
  };

  const handleCardPowerChange = (event) => {
    setCardPowerField(event.target.value);
  };

  const handleCardToughnessChange = (event) => {
    setCardToughnessField(event.target.value);
  };

  const handleCardTypeChange = (event) => {
    setCardTypeField(event.target.value);
  };

  const handleCardAbilityChange = (event) => {
    setCardAbilityField(event.target.value);
  };

  const handleCardFlavorTextChange = (event) => {
    setCardFlavorTextField(event.target.value);
  };

  const handleCardQuoteChange = (event) => {
    setCardQuoteField(event.target.value);
  };

  // {cardData.card_id && cardData.card_id != 'null' && <h1>ID: {cardData.card_id}</h1>}
  // <h1>Card Name: {cardName}</h1>
  // {cardData.expansion_set && cardData.expansion_set != 'null' && <h1>Expansion Set: {cardData.expansion_set}</h1>}
  // {cardData.mana_cost && cardData.mana_cost != 'null' && <h1>Mana Cost: {cardData.mana_cost}</h1>}
  // {cardData.Power && cardData.Power != 'null' && <h1>Power: {cardData.Power}</h1>}
  // {cardData.toughness && cardData.toughness != 'null' && <h1>Toughness: {cardData.toughness}</h1>}
  // {cardData.card_type && !cardData.requested && <h1>Card Type: {cardTypes[cardData.card_type]}</h1>}
  // {cardData.ability && cardData.ability != 'null' && <h1>Ability: {cardData.ability}</h1>}
  // {cardData.flavor_text && cardData.flavor_text != 'null' && <h1>Flavor Text: {cardData.flavor_text}</h1>}
  // {cardData.quote && cardData.quote != 'null' && <h1>Quote: {cardData.quote}</h1>}

  useEffect(() => {
    const fetchCardData = async () => {
      console.log(cardName);
      try {
        const response = await axios.get('http://localhost:8000/api/get-card', {
          params: {
            name: cardName
          }
        });
        setCardData(response.data);
        // set_id(response.data._id);
      } catch (error) {
        console.error('Error fetching card data:', error);
      }
    };

    fetchCardData();
  }, [cardName]);

  const cardTypes = {
    0: 'Sorcery',
    1: 'Instant',
    2: 'Land',
    3: 'Creature',
    4: 'Artifact',
    5: 'Enchantment',
    6: 'Planewalker',
    7: 'Battle'
  };



  return (
    <>
      {cardData ? (
        <Head>
          <title>{cardData.requested ? `[Request] ${cardName}` : cardName}</title>
          <meta name="description" content="Generated by create next app" />
          <meta name="viewport" content="width=device-width, initial-scale=1" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
      ) : (
        <Head>
          <title>Loading</title>
          <meta name="description" content="Generated by create next app" />
          <meta name="viewport" content="width=device-width, initial-scale=1" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
      )}

      {cardData ? (
        <BodyArticle text={cardData.requested ? `[Request] ${cardName}` : cardName}>
          <div className={style['dc-detailcard-section']}>
            <div className={style['dc-image-section']}>
              <CardCom disableHover={true} card_name={cardName} />
            </div>
            {!editingState ? (<div className={style['dc-text-section']}>
              {cardData.card_id && cardData.card_id != 'null' && <h1>ID: {cardData.card_id}</h1>}
              <h1>Card Name: {cardName}</h1>
              {cardData.expansion_set && cardData.expansion_set != 'null' && <h1>Expansion Set: {cardData.expansion_set}</h1>}
              {cardData.mana_cost && cardData.mana_cost != 'null' && <h1>Mana Cost: {cardData.mana_cost}</h1>}
              {cardData.Power && cardData.Power != 'null' && <h1>Power: {cardData.Power}</h1>}
              {cardData.toughness && cardData.toughness != 'null' && <h1>Toughness: {cardData.toughness}</h1>}
              {cardData.card_type && !cardData.requested && <h1>Card Type: {cardTypes[cardData.card_type]}</h1>}
              {cardData.ability && cardData.ability != 'null' && <h1>Ability: {cardData.ability}</h1>}
              {cardData.flavor_text && cardData.flavor_text != 'null' && <h1>Flavor Text: {cardData.flavor_text}</h1>}
              {cardData.quote && cardData.quote != 'null' && <h1>Quote: {cardData.quote}</h1>}
            </div>) : (
              <div className={style['dc-text-section']}>
                <h1>ID: </h1> <input type="text" value={card_idField} onChange={handleCardIDChange} placeholder="Card ID" />
                <h1>Card Name: </h1> <input type="text" value={card_nameField} onChange={handleCardNameChange} placeholder="Card Name" />
                <h1>Expansion Set: </h1><input type="text" value={card_expansionField} onChange={handleCardExpansionChange} placeholder="Expansion Set" />
                <h1>Mana Cost: {cardData.mana_cost}</h1> <input type="text" value={card_manaCostField} onChange={handleCardManaCostChange} placeholder="Mana Cost" />
                <h1>Power: {cardData.Power}</h1>
                <h1>Toughness: {cardData.toughness}</h1>
                <h1>Card Type: {cardTypes[cardData.card_type]}</h1>
                <h1>Ability: {cardData.ability}</h1>
                <h1>Flavor Text: {cardData.flavor_text}</h1>
                <h1>Quote: {cardData.quote}</h1>
              </div>
            )}
          </div>
          <div className={style['dc-button-section']}>
            <input type="button" className={style['button-dc']} value="Edit this card" />
            <input type="button" className={style['button-dc']} value="Acquire this card" />
            <input type="button" className={style['button-dc']} value="Add to collection" />
            <input type="button" className={style['button-dc']} value="Whislsit this card" />
          </div>
        </BodyArticle>
      ) : (
        <BodyArticle text={cardName}>
          Loading...
        </BodyArticle>
      )}
    </>
  );
}