import Head from 'next/head';
import Image from 'next/image';
import { useRouter } from 'next/router';
import BodyArticle from '@/components/body_article/body_article';
import style from '@/components/body_article/body_article.module.css';
import Anonymous from '@/assets/anonymous_profile.png';
import { useCallback, useEffect, useRef, useState } from "react";
import axios from 'axios';
import { useContext } from 'react';
import { AuthContext } from '@/pages/AuthContext.js';
import { useDropzone } from 'react-dropzone';

export default function User() {
  const router = useRouter();
  const [imageUrl, setImageUrl] = useState('');
  const [existUser, setExistUser] = useState(false);
  const [isLoading, setIsLoading] = useState(true);
  const [authedProfile, setAuthedProfile] = useState(false);
  const [email, SetEmail] = useState('');
  const [membershipLevel, setMemberShipLevel] = useState('');

  const [selectedFile, setSelectedFile] = useState(null);

  const onDrop = (acceptedFiles) => {
    setSelectedFile(acceptedFiles[0]);
  };

  const { getRootProps } = useDropzone({ onDrop });

  const { authenticated, username, userId } = useContext(AuthContext);

  const handleFileChange = (event) => {
    const file = event.target.files[0];
    const reader = new FileReader();
    reader.onload = (e) => {
      setImageUrl(e.target.result);
      setSelectedFile(file);
    };
    reader.readAsDataURL(file);
  };

  useEffect(() => {
    const checkExistUser = async () => {
      try {
        if (router.query && router.query.username) {
          const { username } = router.query;
          const response = await axios.post('http://root:password@localhost:8000/api/exist-user', { username }, {
            withCredentials: true,
          });
          const data = response.data;

          setIsLoading(false);
          if (data.exist_user) {
            setExistUser(true);
            const serializedUser = JSON.parse(data.user);
            const user = serializedUser[0].fields;
            if (user.image != null) {
              setSelectedFile(user.image);
            }

            console.log(user);
            SetEmail(user.email);
            if (user.membership_level === 1) {
              setMemberShipLevel('Silver');
            } else if (user.membership_level === 2) {
              setMemberShipLevel('Gold');
            } else if (user.membership_level === 3) {
              setMemberShipLevel('Platinum');
            }
          } else {
            setExistUser(false);
          }
        }

        if (authenticated && username === router.query.username) {
          setAuthedProfile(true);
        }
      } catch (error) {
        console.error(error);
        setIsLoading(false);
      }
    };

    checkExistUser();
  }, [router.query]);

  const savePictureProfile = async () => {
    console.log('savePictureProfile function called');
    if (selectedFile) {
      const formData = new FormData();
      formData.append('image', selectedFile);
      formData.append('username', username);
      formData.append('userid', userId);

      try {
        await axios.post(
          'http://localhost:8000/api/save-profile-picture',
          formData,
          {
            withCredentials: true,
          }
        );
        console.log(formData);
      } catch (error) {
        console.error(error);
      }
      console.log('Profile picture saved successfully!');
    }
  };

  return (
    <>
      <Head>
        {existUser ? (
          <>
            <title>{router.query.username}</title>
            <meta name="description" content="Generated by create next app" />
            <meta name="viewport" content="width=device-width, initial-scale=1" />
            <link rel="icon" href="/favicon.ico" />
          </>
        ) : (
          <>
            <title>Not Found</title>
            <meta name="description" content="Generated by create next app" />
            <meta name="viewport" content="width=device-width, initial-scale=1" />
            <link rel="icon" href="/favicon.ico" />
          </>
        )}
      </Head>

      <BodyArticle>
        {isLoading ? (
          <div>Loading...</div>
        ) : existUser ? (
          <div className={style['user-top']}>
            <div className={style['user-top-left']}>
              {!imageUrl && <Image src={Anonymous} className={style['profile-picture']} />}
              {imageUrl && (
                <img
                  src={imageUrl}
                  {...getRootProps()}
                  alt="Selected Image"
                  className={style['profile-picture']}
                />
              )}
              {/* {authedProfile && (
                <div>
                  <input
                    type="file"
                    onChange={handleFileChange}
                    accept="image/*"
                    className={style['user-pic-file-selector']}
                  />
                </div>
              )} */}
            </div>
            <div className={style['user-top-right']}>
              <div className={style['user-top-right-info']}>Username: {router.query.username}</div>
              <div className={style['user-top-right-info']}>Email: {email}</div>
              <div className={style['user-top-right-info']}>Membership Level: {membershipLevel}</div>
              <div className={style['user-top-right-info']}>Acquired Cards: 0</div>
              <div className={style['user-top-right-info']}>Collections: 0</div>
              <div className={style['user-top-right-info']}>Decks: 0</div>
              {authedProfile && (
                <div className={style['user-bottom-right']}>
                  <div className={style['user-bottom-right-box']}>
                    {/* <button className={style['user-bottom-right-btn']} onClick={savePictureProfile}>
                      Save Picture Profile
                    </button> */}
                    {/* <button className={style['user-bottom-right-btn']}>Delete Account</button> */}
                  </div>
                </div>
              )}
            </div>
          </div>
        ) : (
          <div className={style['not-found']}>Not Found 404</div>
        )}
      </BodyArticle>
    </>
  );
}